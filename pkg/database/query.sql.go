// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const getInfoByBlock = `-- name: GetInfoByBlock :many
SELECT id, height, validator_id, missed FROM missed_blocks WHERE height = ?
`

func (q *Queries) GetInfoByBlock(ctx context.Context, height int64) ([]MissedBlock, error) {
	rows, err := q.db.QueryContext(ctx, getInfoByBlock, height)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MissedBlock
	for rows.Next() {
		var i MissedBlock
		if err := rows.Scan(
			&i.ID,
			&i.Height,
			&i.ValidatorID,
			&i.Missed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInfoByValidatorID = `-- name: GetInfoByValidatorID :many
SELECT id, height, validator_id, missed FROM missed_blocks WHERE validator_id = ?
`

func (q *Queries) GetInfoByValidatorID(ctx context.Context, validatorID int64) ([]MissedBlock, error) {
	rows, err := q.db.QueryContext(ctx, getInfoByValidatorID, validatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MissedBlock
	for rows.Next() {
		var i MissedBlock
		if err := rows.Scan(
			&i.ID,
			&i.Height,
			&i.ValidatorID,
			&i.Missed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidatorByMoniker = `-- name: GetValidatorByMoniker :one
SELECT id, operator_address, pubkey, validator_address, moniker, indentity FROM validators WHERE moniker = ? LIMIT 1
`

func (q *Queries) GetValidatorByMoniker(ctx context.Context, moniker string) (Validator, error) {
	row := q.db.QueryRowContext(ctx, getValidatorByMoniker, moniker)
	var i Validator
	err := row.Scan(
		&i.ID,
		&i.OperatorAddress,
		&i.Pubkey,
		&i.ValidatorAddress,
		&i.Moniker,
		&i.Indentity,
	)
	return i, err
}

const getValidatorByOperatorAddress = `-- name: GetValidatorByOperatorAddress :one
SELECT id, operator_address, pubkey, validator_address, moniker, indentity FROM validators WHERE operator_address = ? LIMIT 1
`

func (q *Queries) GetValidatorByOperatorAddress(ctx context.Context, operatorAddress string) (Validator, error) {
	row := q.db.QueryRowContext(ctx, getValidatorByOperatorAddress, operatorAddress)
	var i Validator
	err := row.Scan(
		&i.ID,
		&i.OperatorAddress,
		&i.Pubkey,
		&i.ValidatorAddress,
		&i.Moniker,
		&i.Indentity,
	)
	return i, err
}

const getValidatorByValidatorAddress = `-- name: GetValidatorByValidatorAddress :one
SELECT id, operator_address, pubkey, validator_address, moniker, indentity FROM validators WHERE validator_address = ? LIMIT 1
`

func (q *Queries) GetValidatorByValidatorAddress(ctx context.Context, validatorAddress string) (Validator, error) {
	row := q.db.QueryRowContext(ctx, getValidatorByValidatorAddress, validatorAddress)
	var i Validator
	err := row.Scan(
		&i.ID,
		&i.OperatorAddress,
		&i.Pubkey,
		&i.ValidatorAddress,
		&i.Moniker,
		&i.Indentity,
	)
	return i, err
}

const insertMissedBlockInfo = `-- name: InsertMissedBlockInfo :exec
INSERT INTO missed_blocks(
   height, validator_id, missed
) VALUES (
   ?, ?, ?
)
`

type InsertMissedBlockInfoParams struct {
	Height      int64
	ValidatorID int64
	Missed      int64
}

func (q *Queries) InsertMissedBlockInfo(ctx context.Context, arg InsertMissedBlockInfoParams) error {
	_, err := q.db.ExecContext(ctx, insertMissedBlockInfo, arg.Height, arg.ValidatorID, arg.Missed)
	return err
}

const insertValidator = `-- name: InsertValidator :one
INSERT INTO validators(
    operator_address, pubkey, validator_address, moniker, indentity
) VALUES (
    ?, ?, ?, ?, ?
)
RETURNING id
`

type InsertValidatorParams struct {
	OperatorAddress  string
	Pubkey           string
	ValidatorAddress string
	Moniker          string
	Indentity        string
}

func (q *Queries) InsertValidator(ctx context.Context, arg InsertValidatorParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertValidator,
		arg.OperatorAddress,
		arg.Pubkey,
		arg.ValidatorAddress,
		arg.Moniker,
		arg.Indentity,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
